import Head from 'next/head';
import { Container, Header, Form, Divider, Table, Button, Icon } from "semantic-ui-react";
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import pkg from "semantic-ui-react/package.json";
import { Prisma } from '@prisma/client';
import prisma from "../lib/prisma";
import { fetcher } from '../utils/fetcher';
import { useState } from "react";

export async function getServerSideProps() {
  const users: Prisma.UserUncheckedUpdateInput[] = await prisma.user.findMany();
  return {
    props: { initialUsers: users }
  };
}

const options = [
  { key: "d", text: "DEVELOPER", value: "DEVELOPER" },
  { key: "u", text: "USER", value: "USER" },
  { key: "a", text: "ADMIN", value: "ADMIN" }

]

export default function Home({ initialUsers }) {
  const [users, setUsers] = useState<Prisma.UserUncheckedCreateInput[]>(initialUsers)
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [email, setEmail] = useState("");
  const [avatar, setAvatar] = useState("");
  const [role, setRole] = useState();

  const handleChange = (e, { value }) => setRole(value);
  
  const capitalize = (s) => {
    if (typeof s !== "string") return "";
    return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link 
          rel="stylesheet" 
          href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.css" 
        />
      </Head>

      <Container style={{ margin: 20 }}>
        <Header as="h3">
          This app is powered by NextJS, Semantic UI {pkg.version}
        </Header>
        <Form onSubmit={ async () => {
            const body: Prisma.UserCreateInput = {
              firstName,
              lastName,
              role,
              email,
              avatar,
            };

            await fetcher("/api/create", { user: body });
            await setUsers([...users, body]);
            setFirstName("");
            setAvatar('');
            setLastName("");
            setRole(null);
            setEmail("");
          }
          }>
          <Form.Group widths="equal">
            <Form.Input 
              fluid 
              label="First Name" 
              placeholder="First Name" 
              value={ firstName }
              onChange={(e) => setFirstName(e.target.value)}
            />
            <br />
            <Form.Input 
              fluid 
              label="Last Name" 
              placeholder="Last Name" 
              value={ lastName }
              onChange={(e) => setLastName(e.target.value)}
            />
            <br />
            <Form.Input 
              fluid 
              label="Email" 
              placeholder="Email" 
              value={ email }
              onChange={(e) => setEmail(e.target.value)}
            />
            <br />
            <Form.Input 
              fluid 
              label="Avatar" 
              placeholder="Avatar" 
              value={ avatar }
              onChange={(e) => setAvatar(e.target.value)}
            />
            <br />
            <Form.Select 
              fluid
              label="Role"
              options={options}
              placeholder="Role"
              value={ role }
              onChange={ handleChange }
            />
            
          </Form.Group>
          <Form.Button>Submit</Form.Button>
        </Form>

        <Divider horizontal>Users</Divider>
        <Table basic="very" celled collapsing>
          <Table.Header>
            <Table.Row>
              <Table.HeaderCell>User</Table.HeaderCell>
              <Table.HeaderCell>Email</Table.HeaderCell>
              <Table.HeaderCell>Action</Table.HeaderCell>
            </Table.Row>
            
            <Table.Body>
              { users.map((u, index)=> (
              <Table.Row key={index}>
                <Table.Cell>
                  <Header as="h4" image>
                    {/* <Image 
                      alt="test"
                      src={u.avatar} 
                      layout="responsive"
                      width={680}
                      height={680}
                    ></Image> */}
                    <Header.Content>
                      {u.firstName + " " + u.lastName}
                      <Header.Subheader>{capitalize(u.role)}</Header.Subheader>
                    </Header.Content>
                  </Header>
                </Table.Cell>
                <Table.Cell>{u.email}</Table.Cell>
                <Table.Cell>
                  <Button 
                  animated="fade" 
                  color="red" 
                  onClick={async () => {
                    await fetcher("/api/delete", {id: u.id});
                    await setUsers(users.filter((usr) => usr !== u));
                  }}
                  >
                    <Button.Content visible>Delete</Button.Content>
                    <Button.Content hidden>
                      <Icon name="user delete" />
                    </Button.Content>
                  </Button>
                </Table.Cell>
              </Table.Row>
              ))};
            </Table.Body>

          </Table.Header>

        </Table>
      </Container>
    </>
  )
}
